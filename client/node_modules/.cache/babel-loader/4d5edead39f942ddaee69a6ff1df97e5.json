{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nconst http = require('request');\n\nconst pkg = require('../../package.json');\n\nconst _require = require('@sendgrid/helpers'),\n      mergeData = _require.helpers.mergeData,\n      ResponseError = _require.classes.ResponseError;\n/**\n * Twilio SendGrid REST Client\n */\n\n\nclass Client {\n  /**\n   * Constructor\n   */\n  constructor() {\n    //API key\n    this.apiKey = ''; //Default headers\n\n    this.defaultHeaders = {\n      'Accept': 'application/json',\n      'User-agent': 'sendgrid/' + pkg.version + ';nodejs'\n    }; //Empty default request\n\n    this.defaultRequest = {\n      json: true,\n      baseUrl: 'https://api.sendgrid.com/',\n      url: '',\n      method: 'GET',\n      headers: {}\n    };\n  }\n  /**\n   * Set API key\n   */\n\n\n  setApiKey(apiKey) {\n    this.apiKey = apiKey;\n  }\n  /**\n   * Set default header\n   */\n\n\n  setDefaultHeader(key, value) {\n    this.defaultHeaders[key] = value;\n    return this;\n  }\n  /**\n   * Set default request\n   */\n\n\n  setDefaultRequest(key, value) {\n    this.defaultRequest[key] = value;\n    return this;\n  }\n  /**\n   * Create headers for request\n   */\n\n\n  createHeaders(data) {\n    //Merge data with default headers\n    const headers = mergeData(this.defaultHeaders, data); //Add API key, but don't overwrite if header already set\n\n    if (typeof headers.Authorization === 'undefined' && this.apiKey) {\n      headers.Authorization = 'Bearer ' + this.apiKey;\n    } //Return\n\n\n    return headers;\n  }\n  /**\n   * Create request\n   */\n\n\n  createRequest(data) {\n    //Keep URL parameter consistent\n    if (data.uri) {\n      data.url = data.uri;\n      delete data.uri;\n    } //Merge data with empty request\n\n\n    const request = mergeData(this.defaultRequest, data); //Add headers\n\n    request.headers = this.createHeaders(request.headers);\n    return request;\n  }\n  /**\n   * Do a request\n   */\n\n\n  request(data, cb) {\n    //Create request\n    const request = this.createRequest(data); //Perform request\n\n    const promise = new Promise((resolve, reject) => {\n      http(request, (error, response, body) => {\n        //Request error\n        if (error) {\n          return reject(error);\n        } //Response error\n\n\n        if (response.statusCode >= 400) {\n          return reject(new ResponseError(response));\n        } //Successful response\n\n\n        resolve([response, body]);\n      });\n    }); // Throw and error incase function not passed\n\n    if (cb && typeof cb !== 'function') {\n      throw new Error('Callback passed is not a function.');\n    } //Execute callback if provided\n\n\n    if (cb) {\n      promise.then(result => cb(null, result)).catch(error => cb(error, null));\n    } //Return promise\n\n\n    return promise;\n  }\n\n} //Export class\n\n\nmodule.exports = Client;","map":{"version":3,"sources":["/Users/shwetagupta/Coding/Repository/marketplace_hc/node_modules/@sendgrid/client/src/classes/client.js"],"names":["http","require","pkg","mergeData","helpers","ResponseError","classes","Client","constructor","apiKey","defaultHeaders","version","defaultRequest","json","baseUrl","url","method","headers","setApiKey","setDefaultHeader","key","value","setDefaultRequest","createHeaders","data","Authorization","createRequest","uri","request","cb","promise","Promise","resolve","reject","error","response","body","statusCode","Error","then","result","catch","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst http = require('request');\nconst pkg = require('../../package.json');\nconst {\n  helpers: {\n    mergeData,\n  },\n  classes: {\n    ResponseError,\n  },\n} = require('@sendgrid/helpers');\n\n/**\n * Twilio SendGrid REST Client\n */\nclass Client {\n\n  /**\n   * Constructor\n   */\n  constructor() {\n\n    //API key\n    this.apiKey = '';\n\n    //Default headers\n    this.defaultHeaders = {\n      'Accept': 'application/json',\n      'User-agent': 'sendgrid/' + pkg.version + ';nodejs',\n    };\n\n    //Empty default request\n    this.defaultRequest = {\n      json: true,\n      baseUrl: 'https://api.sendgrid.com/',\n      url: '',\n      method: 'GET',\n      headers: {},\n    };\n  }\n\n  /**\n   * Set API key\n   */\n  setApiKey(apiKey) {\n    this.apiKey = apiKey;\n  }\n\n  /**\n   * Set default header\n   */\n  setDefaultHeader(key, value) {\n    this.defaultHeaders[key] = value;\n    return this;\n  }\n\n  /**\n   * Set default request\n   */\n  setDefaultRequest(key, value) {\n    this.defaultRequest[key] = value;\n    return this;\n  }\n\n  /**\n   * Create headers for request\n   */\n  createHeaders(data) {\n\n    //Merge data with default headers\n    const headers = mergeData(this.defaultHeaders, data);\n\n    //Add API key, but don't overwrite if header already set\n    if (typeof headers.Authorization === 'undefined' && this.apiKey) {\n      headers.Authorization = 'Bearer ' + this.apiKey;\n    }\n\n    //Return\n    return headers;\n  }\n\n  /**\n   * Create request\n   */\n  createRequest(data) {\n\n    //Keep URL parameter consistent\n    if (data.uri) {\n      data.url = data.uri;\n      delete data.uri;\n    }\n\n    //Merge data with empty request\n    const request = mergeData(this.defaultRequest, data);\n\n    //Add headers\n    request.headers = this.createHeaders(request.headers);\n    return request;\n  }\n\n  /**\n   * Do a request\n   */\n  request(data, cb) {\n\n    //Create request\n    const request = this.createRequest(data);\n\n    //Perform request\n    const promise = new Promise((resolve, reject) => {\n      http(request, (error, response, body) => {\n\n        //Request error\n        if (error) {\n          return reject(error);\n        }\n\n        //Response error\n        if (response.statusCode >= 400) {\n          return reject(new ResponseError(response));\n        }\n\n        //Successful response\n        resolve([response, body]);\n      });\n    });\n\n    // Throw and error incase function not passed\n    if (cb && typeof cb !== 'function') {\n      throw new Error('Callback passed is not a function.');\n    }\n\n    //Execute callback if provided\n    if (cb) {\n      promise\n        .then(result => cb(null, result))\n        .catch(error => cb(error, null));\n    }\n\n    //Return promise\n    return promise;\n  }\n}\n\n//Export class\nmodule.exports = Client;\n"]},"metadata":{},"sourceType":"script"}