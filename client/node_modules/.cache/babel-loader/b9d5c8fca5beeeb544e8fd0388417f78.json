{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nvar _slicedToArray = require(\"/Users/shwetagupta/Coding/Repository/marketplace_hc/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst splitNameEmail = require('../helpers/split-name-email');\n/**\n * Email address class\n */\n\n\nclass EmailAddress {\n  /**\n  * Constructor\n  */\n  constructor(data) {\n    //Construct from data\n    if (data) {\n      this.fromData(data);\n    }\n  }\n  /**\n   * From data\n   */\n\n\n  fromData(data) {\n    //String given\n    if (typeof data === 'string') {\n      const _splitNameEmail = splitNameEmail(data),\n            _splitNameEmail2 = _slicedToArray(_splitNameEmail, 2),\n            name = _splitNameEmail2[0],\n            email = _splitNameEmail2[1];\n\n      data = {\n        name,\n        email\n      };\n    } //Expecting object\n\n\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object or string for EmailAddress data');\n    } //Extract name and email\n\n\n    const _data = data,\n          name = _data.name,\n          email = _data.email; //Set\n\n    this.setEmail(email);\n    this.setName(name);\n  }\n  /**\n   * Set name\n   */\n\n\n  setName(name) {\n    if (typeof name === 'undefined') {\n      return;\n    }\n\n    if (typeof name !== 'string') {\n      throw new Error('String expected for `name`');\n    } // Wrap name in quotes to address API issue\n    // https://github.com/sendgrid/sendgrid-csharp/issues/268#issuecomment-232177443\n\n\n    const isQuoted = name[0] === '\\\"' && name[name.length - 1] === '\\\"';\n    const shouldQuote = name.includes(',') && !isQuoted;\n    this.name = shouldQuote ? `\\\"${name}\\\"` : name;\n  }\n  /**\n   * Set email (mandatory)\n   */\n\n\n  setEmail(email) {\n    if (typeof email === 'undefined') {\n      throw new Error('Must provide `email`');\n    }\n\n    if (typeof email !== 'string') {\n      throw new Error('String expected for `email`');\n    }\n\n    this.email = email;\n  }\n  /**\n  * To JSON\n  */\n\n\n  toJSON() {\n    //Get properties\n    const email = this.email,\n          name = this.name; //Initialize with mandatory properties\n\n    const json = {\n      email\n    }; //Add name if present\n\n    if (name !== '') {\n      json.name = name;\n    } //Return\n\n\n    return json;\n  }\n  /**************************************************************************\n   * Static helpers\n   ***/\n\n  /**\n   * Create an EmailAddress instance from given data\n   */\n\n\n  static create(data) {\n    //Array?\n    if (Array.isArray(data)) {\n      return data.filter(item => !!item).map(item => this.create(item));\n    } //Already instance of EmailAddress class?\n\n\n    if (data instanceof EmailAddress) {\n      return data;\n    } //Create instance\n\n\n    return new EmailAddress(data);\n  }\n\n} //Export class\n\n\nmodule.exports = EmailAddress;","map":{"version":3,"sources":["/Users/shwetagupta/Coding/Repository/marketplace_hc/node_modules/@sendgrid/helpers/classes/email-address.js"],"names":["splitNameEmail","require","EmailAddress","constructor","data","fromData","name","email","Error","setEmail","setName","isQuoted","length","shouldQuote","includes","toJSON","json","create","Array","isArray","filter","item","map","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst splitNameEmail = require('../helpers/split-name-email');\n\n/**\n * Email address class\n */\nclass EmailAddress {\n\n  /**\n\t * Constructor\n\t */\n  constructor(data) {\n\n    //Construct from data\n    if (data) {\n      this.fromData(data);\n    }\n  }\n\n  /**\n   * From data\n   */\n  fromData(data) {\n\n    //String given\n    if (typeof data === 'string') {\n      const [name, email] = splitNameEmail(data);\n      data = {name, email};\n    }\n\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object or string for EmailAddress data');\n    }\n\n    //Extract name and email\n    const {name, email} = data;\n\n    //Set\n    this.setEmail(email);\n    this.setName(name);\n  }\n\n  /**\n   * Set name\n   */\n  setName(name) {\n    if (typeof name === 'undefined') {\n      return;\n    }\n    if (typeof name !== 'string') {\n      throw new Error('String expected for `name`');\n    }\n    // Wrap name in quotes to address API issue\n    // https://github.com/sendgrid/sendgrid-csharp/issues/268#issuecomment-232177443\n    const isQuoted = (name[0] === '\\\"') && (name[name.length - 1] === '\\\"');\n    const shouldQuote = name.includes(',') && !isQuoted;\n    this.name = shouldQuote ? `\\\"${name}\\\"` : name;\n  }\n\n  /**\n   * Set email (mandatory)\n   */\n  setEmail(email) {\n    if (typeof email === 'undefined') {\n      throw new Error('Must provide `email`');\n    }\n    if (typeof email !== 'string') {\n      throw new Error('String expected for `email`');\n    }\n    this.email = email;\n  }\n\n  /**\n\t * To JSON\n\t */\n  toJSON() {\n\n    //Get properties\n    const {email, name} = this;\n\n    //Initialize with mandatory properties\n    const json = {email};\n\n    //Add name if present\n    if (name !== '') {\n      json.name = name;\n    }\n\n    //Return\n    return json;\n  }\n\n  /**************************************************************************\n   * Static helpers\n   ***/\n\n  /**\n   * Create an EmailAddress instance from given data\n   */\n  static create(data) {\n\n    //Array?\n    if (Array.isArray(data)) {\n      return data\n        .filter(item => !!item)\n        .map(item => this.create(item));\n    }\n\n    //Already instance of EmailAddress class?\n    if (data instanceof EmailAddress) {\n      return data;\n    }\n\n    //Create instance\n    return new EmailAddress(data);\n  }\n}\n\n//Export class\nmodule.exports = EmailAddress;\n"]},"metadata":{},"sourceType":"script"}