{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nconst _require = require('@sendgrid/client'),\n      Client = _require.Client;\n\nconst _require2 = require('@sendgrid/helpers'),\n      Mail = _require2.classes.Mail;\n/**\n * Mail service class\n */\n\n\nclass MailService {\n  /**\n   * Constructor\n   */\n  constructor() {\n    //Set client, initialize substitution wrappers and secret rules\n    //filter\n    this.setClient(new Client());\n    this.setSubstitutionWrappers('{{', '}}');\n    this.secretRules = [];\n  }\n  /**\n   * Set client\n   */\n\n\n  setClient(client) {\n    this.client = client;\n  }\n  /**\n   * API key pass through for convenience\n   */\n\n\n  setApiKey(apiKey) {\n    this.client.setApiKey(apiKey);\n  }\n  /**\n   * Set substitution wrappers\n   */\n\n\n  setSubstitutionWrappers(left, right) {\n    if (typeof left === 'undefined' || typeof right === 'undefined') {\n      throw new Error('Must provide both left and right side wrappers');\n    }\n\n    if (!Array.isArray(this.substitutionWrappers)) {\n      this.substitutionWrappers = [];\n    }\n\n    this.substitutionWrappers[0] = left;\n    this.substitutionWrappers[1] = right;\n  }\n  /**\n   * Set secret rules for filtering the e-mail content\n   */\n\n\n  setSecretRules(rules) {\n    if (!(rules instanceof Array)) {\n      rules = [rules];\n    }\n\n    const tmpRules = rules.map(function (rule) {\n      const ruleType = typeof rule;\n\n      if (ruleType === 'string') {\n        return {\n          pattern: new RegExp(rule)\n        };\n      } else if (ruleType === 'object') {\n        // normalize rule object\n        if (rule instanceof RegExp) {\n          rule = {\n            pattern: rule\n          };\n        } else if (rule.hasOwnProperty('pattern') && typeof rule.pattern === 'string') {\n          rule.pattern = new RegExp(rule.pattern);\n        }\n\n        try {\n          // test if rule.pattern is a valid regex\n          rule.pattern.test('');\n          return rule;\n        } catch (err) {// continue regardless of error\n        }\n      }\n    });\n    this.secretRules = tmpRules.filter(function (val) {\n      return val;\n    });\n  }\n  /**\n   * Check if the e-mail is safe to be sent\n   */\n\n\n  filterSecrets(body) {\n    if (typeof body === 'object' && !body.hasOwnProperty('content')) {\n      return;\n    }\n\n    const self = this;\n    body.content.forEach(function (data) {\n      self.secretRules.forEach(function (rule) {\n        if (rule.hasOwnProperty('pattern') && !rule.pattern.test(data.value)) {\n          return;\n        }\n\n        let message = `The pattern '${rule.pattern}'`;\n\n        if (rule.name) {\n          message += `identified by '${rule.name}'`;\n        }\n\n        message += ` was found in the Mail content!`;\n        throw new Error(message);\n      });\n    });\n  }\n  /**\n   * Send email\n   */\n\n\n  send(data, isMultiple = false, cb) {\n    //Callback as second parameter\n    if (typeof isMultiple === 'function') {\n      cb = isMultiple;\n      isMultiple = false;\n    } //Array? Send in parallel\n\n\n    if (Array.isArray(data)) {\n      //Create promise\n      const promise = Promise.all(data.map(item => {\n        return this.send(item, isMultiple);\n      })); //Execute callback if provided\n\n      if (cb) {\n        promise.then(result => cb(null, result)).catch(error => cb(error, null));\n      } //Return promise\n\n\n      return promise;\n    } //Send mail\n\n\n    try {\n      //Append multiple flag to data if not set\n      if (typeof data.isMultiple === 'undefined') {\n        data.isMultiple = isMultiple;\n      } //Append global substitution wrappers if not set in data\n\n\n      if (typeof data.substitutionWrappers === 'undefined') {\n        data.substitutionWrappers = this.substitutionWrappers;\n      } //Create Mail instance from data and get JSON body for request\n\n\n      const mail = Mail.create(data);\n      const body = mail.toJSON(); //Filters the Mail body to avoid sensitive content leakage\n\n      this.filterSecrets(body); //Create request\n\n      const request = {\n        method: 'POST',\n        url: '/v3/mail/send',\n        body\n      }; //Send\n\n      return this.client.request(request, cb);\n    } //Catch sync errors\n    catch (error) {\n      //Pass to callback if provided\n      if (cb) {\n        // eslint-disable-next-line callback-return\n        cb(error, null);\n      } //Reject promise\n\n\n      return Promise.reject(error);\n    }\n  }\n  /**\n   * Send multiple emails (shortcut)\n   */\n\n\n  sendMultiple(data, cb) {\n    return this.send(data, true, cb);\n  }\n\n} //Export class\n\n\nmodule.exports = MailService;","map":{"version":3,"sources":["/Users/shwetagupta/Coding/Repository/marketplace_hc/node_modules/@sendgrid/mail/src/classes/mail-service.js"],"names":["require","Client","Mail","classes","MailService","constructor","setClient","setSubstitutionWrappers","secretRules","client","setApiKey","apiKey","left","right","Error","Array","isArray","substitutionWrappers","setSecretRules","rules","tmpRules","map","rule","ruleType","pattern","RegExp","hasOwnProperty","test","err","filter","val","filterSecrets","body","self","content","forEach","data","value","message","name","send","isMultiple","cb","promise","Promise","all","item","then","result","catch","error","mail","create","toJSON","request","method","url","reject","sendMultiple","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst {Client} = require('@sendgrid/client');\nconst {classes: {Mail}} = require('@sendgrid/helpers');\n\n/**\n * Mail service class\n */\nclass MailService {\n\n  /**\n   * Constructor\n   */\n  constructor() {\n\n    //Set client, initialize substitution wrappers and secret rules\n    //filter\n    this.setClient(new Client());\n    this.setSubstitutionWrappers('{{', '}}');\n    this.secretRules = [];\n  }\n\n  /**\n   * Set client\n   */\n  setClient(client) {\n    this.client = client;\n  }\n\n  /**\n   * API key pass through for convenience\n   */\n  setApiKey(apiKey) {\n    this.client.setApiKey(apiKey);\n  }\n\n  /**\n   * Set substitution wrappers\n   */\n  setSubstitutionWrappers(left, right) {\n    if (typeof left === 'undefined' || typeof right === 'undefined') {\n      throw new Error('Must provide both left and right side wrappers');\n    }\n    if (!Array.isArray(this.substitutionWrappers)) {\n      this.substitutionWrappers = [];\n    }\n    this.substitutionWrappers[0] = left;\n    this.substitutionWrappers[1] = right;\n  }\n\n  /**\n   * Set secret rules for filtering the e-mail content\n   */\n  setSecretRules(rules) {\n    if (!(rules instanceof Array)) {\n      rules = [rules];\n    }\n\n    const tmpRules = rules.map(function(rule) {\n      const ruleType = typeof rule;\n\n      if (ruleType === 'string') {\n        return {\n          pattern: new RegExp(rule),\n        };\n      }\n      else if (ruleType === 'object') {\n        // normalize rule object\n        if (rule instanceof RegExp) {\n          rule = {\n            pattern: rule,\n          };\n        }\n        else if (rule.hasOwnProperty('pattern')\n          && (typeof rule.pattern === 'string')\n        ) {\n          rule.pattern = new RegExp(rule.pattern);\n        }\n\n        try {\n          // test if rule.pattern is a valid regex\n          rule.pattern.test('');\n          return rule;\n        }\n        catch (err) {\n          // continue regardless of error\n        }\n      }\n    });\n\n    this.secretRules = tmpRules.filter(function(val) {\n      return val;\n    });\n  }\n\n  /**\n   * Check if the e-mail is safe to be sent\n   */\n  filterSecrets(body) {\n    if ((typeof body === 'object') && !body.hasOwnProperty('content')) {\n      return;\n    }\n\n    const self = this;\n\n    body.content.forEach(function(data) {\n      self.secretRules.forEach(function(rule) {\n        if (rule.hasOwnProperty('pattern')\n          && !rule.pattern.test(data.value)\n        ) {\n          return;\n        }\n\n        let message = `The pattern '${rule.pattern}'`;\n\n        if (rule.name) {\n          message += `identified by '${rule.name}'`;\n        }\n\n        message += ` was found in the Mail content!`;\n\n        throw new Error(message);\n      });\n    });\n  }\n\n  /**\n   * Send email\n   */\n  send(data, isMultiple = false, cb) {\n\n    //Callback as second parameter\n    if (typeof isMultiple === 'function') {\n      cb = isMultiple;\n      isMultiple = false;\n    }\n\n    //Array? Send in parallel\n    if (Array.isArray(data)) {\n\n      //Create promise\n      const promise = Promise.all(data.map(item => {\n        return this.send(item, isMultiple);\n      }));\n\n      //Execute callback if provided\n      if (cb) {\n        promise\n          .then(result => cb(null, result))\n          .catch(error => cb(error, null));\n      }\n\n      //Return promise\n      return promise;\n    }\n\n    //Send mail\n    try {\n\n      //Append multiple flag to data if not set\n      if (typeof data.isMultiple === 'undefined') {\n        data.isMultiple = isMultiple;\n      }\n\n      //Append global substitution wrappers if not set in data\n      if (typeof data.substitutionWrappers === 'undefined') {\n        data.substitutionWrappers = this.substitutionWrappers;\n      }\n\n      //Create Mail instance from data and get JSON body for request\n      const mail = Mail.create(data);\n      const body = mail.toJSON();\n\n      //Filters the Mail body to avoid sensitive content leakage\n      this.filterSecrets(body);\n\n      //Create request\n      const request = {\n        method: 'POST',\n        url: '/v3/mail/send',\n        body,\n      };\n\n      //Send\n      return this.client.request(request, cb);\n    }\n\n    //Catch sync errors\n    catch (error) {\n\n      //Pass to callback if provided\n      if (cb) {\n        // eslint-disable-next-line callback-return\n        cb(error, null);\n      }\n\n      //Reject promise\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Send multiple emails (shortcut)\n   */\n  sendMultiple(data, cb) {\n    return this.send(data, true, cb);\n  }\n}\n\n//Export class\nmodule.exports = MailService;\n"]},"metadata":{},"sourceType":"script"}