{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode'; // instantiate axios\n\nconst AuthHelper = axios.create();\n\nAuthHelper.getToken = function () {\n  return localStorage.getItem('token');\n};\n\nAuthHelper.setToken = function (token) {\n  localStorage.setItem('token', token);\n  return token;\n};\n\nAuthHelper.getCurrentUser = function () {\n  const token = this.getToken();\n  if (token) return jwtDecode(token);\n  return null;\n};\n\nAuthHelper.logIn = function (credentials) {\n  return this({\n    method: 'post',\n    url: '/api/user/authenticate',\n    data: credentials\n  }).then(serverResponse => {\n    const token = serverResponse.data.token;\n\n    if (token) {\n      // sets token as an included header for all subsequent api requests\n      this.defaults.headers.common.token = this.setToken(token);\n      return jwtDecode(token);\n    } else {\n      return false;\n    }\n  });\n}; // logIn and signUp functions could be combined into one since the only difference is the url we're sending a request to..\n\n\nAuthHelper.signUp = function (userInfo) {\n  console.log(\"hello\");\n  return this({\n    method: 'post',\n    url: '/api/user',\n    data: userInfo\n  }).then(serverResponse => {\n    console.log(serverResponse.data.token);\n    const token = serverResponse.data.token;\n\n    if (token) {\n      // sets token as an included header for all subsequent api requests\n      this.defaults.headers.common.token = this.setToken(token);\n      return jwtDecode(token);\n    } else {\n      return false;\n    }\n  });\n};\n\nAuthHelper.logOut = function () {\n  localStorage.removeItem('token');\n  delete this.defaults.headers.common.token;\n  return true;\n}; // During initial app load attempt to set a localStorage stored token\n// as a default header for all api requests.\n\n\nAuthHelper.defaults.headers.common.token = AuthHelper.getToken();\nexport default AuthHelper;","map":{"version":3,"sources":["/Users/shwetagupta/Coding/Repository/marketplace_hc/client/src/AuthHelper.js"],"names":["axios","jwtDecode","AuthHelper","create","getToken","localStorage","getItem","setToken","token","setItem","getCurrentUser","logIn","credentials","method","url","data","then","serverResponse","defaults","headers","common","signUp","userInfo","console","log","logOut","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,MAAMC,UAAU,GAAGF,KAAK,CAACG,MAAN,EAAnB;;AAEAD,UAAU,CAACE,QAAX,GAAsB,YAAW;AAChC,SAAOC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAP;AACA,CAFD;;AAIAJ,UAAU,CAACK,QAAX,GAAsB,UAASC,KAAT,EAAgB;AACrCH,EAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BD,KAA9B;AACA,SAAOA,KAAP;AACA,CAHD;;AAKAN,UAAU,CAACQ,cAAX,GAA4B,YAAW;AACtC,QAAMF,KAAK,GAAG,KAAKJ,QAAL,EAAd;AACA,MAAGI,KAAH,EAAU,OAAOP,SAAS,CAACO,KAAD,CAAhB;AACV,SAAO,IAAP;AACA,CAJD;;AAMAN,UAAU,CAACS,KAAX,GAAmB,UAASC,WAAT,EAAsB;AACxC,SAAO,KAAK;AAAEC,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,GAAG,EAAE,wBAAvB;AAAiDC,IAAAA,IAAI,EAAEH;AAAvD,GAAL,EACLI,IADK,CACCC,cAAD,IAAoB;AACzB,UAAMT,KAAK,GAAGS,cAAc,CAACF,IAAf,CAAoBP,KAAlC;;AACA,QAAGA,KAAH,EAAU;AACT;AACA,WAAKU,QAAL,CAAcC,OAAd,CAAsBC,MAAtB,CAA6BZ,KAA7B,GAAqC,KAAKD,QAAL,CAAcC,KAAd,CAArC;AACA,aAAOP,SAAS,CAACO,KAAD,CAAhB;AACA,KAJD,MAIO;AACN,aAAO,KAAP;AACA;AACD,GAVK,CAAP;AAWA,CAZD,C,CAcA;;;AACAN,UAAU,CAACmB,MAAX,GAAoB,UAASC,QAAT,EAAmB;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,SAAO,KAAK;AAAEX,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,GAAG,EAAE,WAAvB;AAAoCC,IAAAA,IAAI,EAAEO;AAA1C,GAAL,EACLN,IADK,CACCC,cAAD,IAAoB;AACzBM,IAAAA,OAAO,CAACC,GAAR,CAAYP,cAAc,CAACF,IAAf,CAAoBP,KAAhC;AACA,UAAMA,KAAK,GAAGS,cAAc,CAACF,IAAf,CAAoBP,KAAlC;;AACA,QAAGA,KAAH,EAAU;AACT;AACA,WAAKU,QAAL,CAAcC,OAAd,CAAsBC,MAAtB,CAA6BZ,KAA7B,GAAqC,KAAKD,QAAL,CAAcC,KAAd,CAArC;AACA,aAAOP,SAAS,CAACO,KAAD,CAAhB;AACA,KAJD,MAIO;AACN,aAAO,KAAP;AACA;AACD,GAXK,CAAP;AAYA,CAdD;;AAgBAN,UAAU,CAACuB,MAAX,GAAoB,YAAW;AAC9BpB,EAAAA,YAAY,CAACqB,UAAb,CAAwB,OAAxB;AACA,SAAO,KAAKR,QAAL,CAAcC,OAAd,CAAsBC,MAAtB,CAA6BZ,KAApC;AACA,SAAO,IAAP;AACA,CAJD,C,CAMA;AACA;;;AACAN,UAAU,CAACgB,QAAX,CAAoBC,OAApB,CAA4BC,MAA5B,CAAmCZ,KAAnC,GAA2CN,UAAU,CAACE,QAAX,EAA3C;AACA,eAAeF,UAAf","sourcesContent":["import axios from 'axios'\nimport jwtDecode from 'jwt-decode'\n\n// instantiate axios\nconst AuthHelper = axios.create()\n\nAuthHelper.getToken = function() {\n\treturn localStorage.getItem('token')\n}\n\nAuthHelper.setToken = function(token) {\n\tlocalStorage.setItem('token', token)\n\treturn token\n}\n\nAuthHelper.getCurrentUser = function() {\n\tconst token = this.getToken()\n\tif(token) return jwtDecode(token)\n\treturn null\n}\n\nAuthHelper.logIn = function(credentials) {\n\treturn this({ method: 'post', url: '/api/user/authenticate', data: credentials })\n\t\t.then((serverResponse) => {\n\t\t\tconst token = serverResponse.data.token\n\t\t\tif(token) {\n\t\t\t\t// sets token as an included header for all subsequent api requests\n\t\t\t\tthis.defaults.headers.common.token = this.setToken(token)\n\t\t\t\treturn jwtDecode(token)\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t})\n}\n\n// logIn and signUp functions could be combined into one since the only difference is the url we're sending a request to..\nAuthHelper.signUp = function(userInfo) {\n\tconsole.log(\"hello\")\n\treturn this({ method: 'post', url: '/api/user', data: userInfo})\n\t\t.then((serverResponse) => {\n\t\t\tconsole.log(serverResponse.data.token)\n\t\t\tconst token = serverResponse.data.token\n\t\t\tif(token) {\n\t\t\t\t// sets token as an included header for all subsequent api requests\n\t\t\t\tthis.defaults.headers.common.token = this.setToken(token)\n\t\t\t\treturn jwtDecode(token)\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t})\n}\n\nAuthHelper.logOut = function() {\n\tlocalStorage.removeItem('token')\n\tdelete this.defaults.headers.common.token\n\treturn true\n}\n\n// During initial app load attempt to set a localStorage stored token\n// as a default header for all api requests.\nAuthHelper.defaults.headers.common.token = AuthHelper.getToken()\nexport default AuthHelper"]},"metadata":{},"sourceType":"module"}