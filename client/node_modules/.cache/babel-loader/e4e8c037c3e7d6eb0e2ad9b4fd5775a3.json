{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nconst EmailAddress = require('./email-address');\n\nconst Personalization = require('./personalization');\n\nconst toCamelCase = require('../helpers/to-camel-case');\n\nconst toSnakeCase = require('../helpers/to-snake-case');\n\nconst deepClone = require('../helpers/deep-clone');\n\nconst arrayToJSON = require('../helpers/array-to-json');\n\nconst _require = require('../constants'),\n      DYNAMIC_TEMPLATE_CHAR_WARNING = _require.DYNAMIC_TEMPLATE_CHAR_WARNING;\n/**\n * Mail class\n */\n\n\nclass Mail {\n  /**\n   * Constructor\n   */\n  constructor(data) {\n    //Initialize array and object properties\n    this.isDynamic = false;\n    this.personalizations = [];\n    this.attachments = [];\n    this.content = [];\n    this.categories = [];\n    this.headers = {};\n    this.sections = {};\n    this.customArgs = {};\n    this.trackingSettings = {};\n    this.mailSettings = {};\n    this.asm = {}; //Helper properties\n\n    this.substitutions = null;\n    this.substitutionWrappers = null;\n    this.dynamicTemplateData = null; //Process data if given\n\n    if (data) {\n      this.fromData(data);\n    }\n  }\n  /**\n   * Build from data\n   */\n\n\n  fromData(data) {\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object for Mail data');\n    } //Convert to camel case to make it workable, making a copy to prevent\n    //changes to the original objects\n\n\n    data = deepClone(data);\n    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']); //Extract properties from data\n\n    const _data = data,\n          to = _data.to,\n          from = _data.from,\n          replyTo = _data.replyTo,\n          cc = _data.cc,\n          bcc = _data.bcc,\n          sendAt = _data.sendAt,\n          subject = _data.subject,\n          text = _data.text,\n          html = _data.html,\n          content = _data.content,\n          templateId = _data.templateId,\n          personalizations = _data.personalizations,\n          attachments = _data.attachments,\n          ipPoolName = _data.ipPoolName,\n          batchId = _data.batchId,\n          sections = _data.sections,\n          headers = _data.headers,\n          categories = _data.categories,\n          category = _data.category,\n          customArgs = _data.customArgs,\n          asm = _data.asm,\n          mailSettings = _data.mailSettings,\n          trackingSettings = _data.trackingSettings,\n          substitutions = _data.substitutions,\n          substitutionWrappers = _data.substitutionWrappers,\n          dynamicTemplateData = _data.dynamicTemplateData,\n          isMultiple = _data.isMultiple; //Set data\n\n    this.setFrom(from);\n    this.setReplyTo(replyTo);\n    this.setSubject(subject);\n    this.setSendAt(sendAt);\n    this.setTemplateId(templateId);\n    this.setBatchId(batchId);\n    this.setIpPoolName(ipPoolName);\n    this.setAttachments(attachments);\n    this.setContent(content);\n    this.setSections(sections);\n    this.setHeaders(headers);\n    this.setCategories(category);\n    this.setCategories(categories);\n    this.setCustomArgs(customArgs);\n    this.setAsm(asm);\n    this.setMailSettings(mailSettings);\n    this.setTrackingSettings(trackingSettings);\n\n    if (this.isDynamic) {\n      this.setDynamicTemplateData(dynamicTemplateData);\n    } else {\n      this.setSubstitutions(substitutions);\n      this.setSubstitutionWrappers(substitutionWrappers);\n    } //Add contents from text/html properties\n\n\n    this.addTextContent(text);\n    this.addHtmlContent(html); //Using \"to\" property for personalizations\n\n    if (personalizations) {\n      this.setPersonalizations(personalizations);\n    } //Multiple individual emails\n    else if (isMultiple && Array.isArray(to)) {\n        to.forEach(to => this.addTo(to, cc, bcc));\n      } //Single email (possibly with multiple recipients in the to field)\n      else {\n          this.addTo(to, cc, bcc);\n        }\n  }\n  /**\n   * Set from email\n   */\n\n\n  setFrom(from) {\n    if (typeof from === 'undefined') {\n      return;\n    }\n\n    this.from = EmailAddress.create(from);\n  }\n  /**\n   * Set reply to\n   */\n\n\n  setReplyTo(replyTo) {\n    if (typeof replyTo === 'undefined') {\n      return;\n    }\n\n    this.replyTo = EmailAddress.create(replyTo);\n  }\n  /**\n   * Set subject\n   */\n\n\n  setSubject(subject) {\n    if (typeof subject === 'undefined') {\n      return;\n    }\n\n    if (typeof subject !== 'string') {\n      throw new Error('String expected for `subject`');\n    }\n\n    this.subject = subject;\n  }\n  /**\n   * Set send at\n   */\n\n\n  setSendAt(sendAt) {\n    if (typeof sendAt === 'undefined') {\n      return;\n    }\n\n    if (!Number.isInteger(sendAt)) {\n      throw new Error('Integer expected for `sendAt`');\n    }\n\n    this.sendAt = sendAt;\n  }\n  /**\n   * Set template ID, also checks if the template is dynamic or legacy\n   */\n\n\n  setTemplateId(templateId) {\n    if (typeof templateId === 'undefined') {\n      return;\n    }\n\n    if (typeof templateId !== 'string') {\n      throw new Error('String expected for `templateId`');\n    }\n\n    if (templateId.indexOf('d-') === 0) {\n      this.isDynamic = true;\n    }\n\n    this.templateId = templateId;\n  }\n  /**\n   * Set batch ID\n   */\n\n\n  setBatchId(batchId) {\n    if (typeof batchId === 'undefined') {\n      return;\n    }\n\n    if (typeof batchId !== 'string') {\n      throw new Error('String expected for `batchId`');\n    }\n\n    this.batchId = batchId;\n  }\n  /**\n   * Set IP pool name\n   */\n\n\n  setIpPoolName(ipPoolName) {\n    if (typeof ipPoolName === 'undefined') {\n      return;\n    }\n\n    if (typeof ipPoolName !== 'string') {\n      throw new Error('String expected for `ipPoolName`');\n    }\n\n    this.ipPoolName = ipPoolName;\n  }\n  /**\n   * Set ASM\n   */\n\n\n  setAsm(asm) {\n    if (typeof asm === 'undefined') {\n      return;\n    }\n\n    if (typeof asm !== 'object') {\n      throw new Error('Object expected for `asm`');\n    }\n\n    this.asm = asm;\n  }\n  /**\n   * Set personalizations\n   */\n\n\n  setPersonalizations(personalizations) {\n    if (typeof personalizations === 'undefined') {\n      return;\n    }\n\n    if (!Array.isArray(personalizations)) {\n      throw new Error('Array expected for `personalizations`');\n    } //Clear and use add helper to add one by one\n\n\n    this.personalizations = [];\n    personalizations.forEach(personalization => this.addPersonalization(personalization));\n  }\n  /**\n   * Add personalization\n   */\n\n\n  addPersonalization(personalization) {\n    //We should either send substitutions or dynamicTemplateData\n    //depending on the templateId\n    if (this.isDynamic && personalization.substitutions) {\n      delete personalization.substitutions;\n    } else if (personalization.dynamicTemplateData) {\n      delete personalization.dynamicTemplateData;\n    } //Convert to class if needed\n\n\n    if (!(personalization instanceof Personalization)) {\n      personalization = new Personalization(personalization);\n    } //If this is dynamic, set dynamicTemplateData, or set substitutions\n\n\n    if (this.isDynamic) {\n      this.applyDynamicTemplateData(personalization);\n    } else {\n      this.applySubstitutions(personalization);\n    } //Push personalization to array\n\n\n    this.personalizations.push(personalization);\n  }\n  /**\n   * Convenience method for quickly creating personalizations\n   */\n\n\n  addTo(to, cc, bcc) {\n    if (typeof to === 'undefined' && typeof cc === 'undefined' && typeof bcc === 'undefined') {\n      throw new Error('Provide at least one of to, cc or bcc');\n    }\n\n    this.addPersonalization(new Personalization({\n      to,\n      cc,\n      bcc\n    }));\n  }\n  /**\n   * Set substitutions\n   */\n\n\n  setSubstitutions(substitutions) {\n    if (typeof substitutions === 'undefined') {\n      return;\n    }\n\n    if (typeof substitutions !== 'object') {\n      throw new Error('Object expected for `substitutions`');\n    }\n\n    this.substitutions = substitutions;\n  }\n  /**\n   * Set substitution wrappers\n   */\n\n\n  setSubstitutionWrappers(wrappers) {\n    if (typeof wrappers === 'undefined') {\n      return;\n    }\n\n    if (!Array.isArray(wrappers) || wrappers.length !== 2) {\n      throw new Error('Array expected with two elements for `substitutionWrappers`');\n    }\n\n    this.substitutionWrappers = wrappers;\n  }\n  /**\n   * Helper which applies globally set substitutions to personalizations\n   */\n\n\n  applySubstitutions(personalization) {\n    if (personalization instanceof Personalization) {\n      personalization.reverseMergeSubstitutions(this.substitutions);\n      personalization.setSubstitutionWrappers(this.substitutionWrappers);\n    }\n  }\n  /**\n   * Helper which applies globally set dynamic_template_data to personalizations\n   */\n\n\n  applyDynamicTemplateData(personalization) {\n    if (personalization instanceof Personalization) {\n      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);\n    }\n  }\n  /**\n   * Set dynamicTemplateData\n   */\n\n\n  setDynamicTemplateData(dynamicTemplateData) {\n    if (typeof dynamicTemplateData === 'undefined') {\n      return;\n    }\n\n    if (typeof dynamicTemplateData !== 'object') {\n      throw new Error('Object expected for `dynamicTemplateData`');\n    } // Check dynamic template for non-escaped characters and warn if found\n\n\n    Object.values(dynamicTemplateData).forEach(value => {\n      if (/['\"&]/.test(value)) {\n        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);\n      }\n    });\n    this.dynamicTemplateData = dynamicTemplateData;\n  }\n  /**\n   * Set content\n   */\n\n\n  setContent(content) {\n    if (typeof content === 'undefined') {\n      return;\n    }\n\n    if (!Array.isArray(content)) {\n      throw new Error('Array expected for `content`');\n    }\n\n    this.content = content;\n  }\n  /**\n   * Add content\n   */\n\n\n  addContent(content) {\n    if (typeof content !== 'object') {\n      throw new Error('Object expected for `content`');\n    }\n\n    this.content.push(content);\n  }\n  /**\n   * Add text content\n   */\n\n\n  addTextContent(text) {\n    if (typeof text === 'undefined') {\n      return;\n    }\n\n    if (typeof text !== 'string') {\n      throw new Error('String expected for `text`');\n    }\n\n    this.addContent({\n      value: text,\n      type: 'text/plain'\n    });\n  }\n  /**\n   * Add HTML content\n   */\n\n\n  addHtmlContent(html) {\n    if (typeof html === 'undefined') {\n      return;\n    }\n\n    if (typeof html !== 'string') {\n      throw new Error('String expected for `html`');\n    }\n\n    this.addContent({\n      value: html,\n      type: 'text/html'\n    });\n  }\n  /**\n   * Set attachments\n   */\n\n\n  setAttachments(attachments) {\n    if (typeof attachments === 'undefined') {\n      return;\n    }\n\n    if (!Array.isArray(attachments)) {\n      throw new Error('Array expected for `attachments`');\n    }\n\n    this.attachments = attachments;\n  }\n  /**\n   * Add attachment\n   */\n\n\n  addAttachment(attachment) {\n    if (typeof attachment !== 'object') {\n      throw new Error('Object expected for `attachment`');\n    }\n\n    this.attachments.push(attachment);\n  }\n  /**\n   * Set categories\n   */\n\n\n  setCategories(categories) {\n    if (typeof categories === 'undefined') {\n      return;\n    }\n\n    if (typeof categories === 'string') {\n      categories = [categories];\n    }\n\n    if (!Array.isArray(categories) || !categories.every(cat => typeof cat === 'string')) {\n      throw new Error('Array of strings expected for `categories`');\n    }\n\n    this.categories = categories;\n  }\n  /**\n   * Add category\n   */\n\n\n  addCategory(category) {\n    if (typeof category !== 'string') {\n      throw new Error('String expected for `category`');\n    }\n\n    this.categories.push(category);\n  }\n  /**\n   * Set headers\n   */\n\n\n  setHeaders(headers) {\n    if (typeof headers === 'undefined') {\n      return;\n    }\n\n    if (typeof headers !== 'object') {\n      throw new Error('Object expected for `headers`');\n    }\n\n    this.headers = headers;\n  }\n  /**\n   * Add a header\n   */\n\n\n  addHeader(key, value) {\n    if (typeof key !== 'string') {\n      throw new Error('String expected for header key');\n    }\n\n    if (typeof value !== 'string') {\n      throw new Error('String expected for header value');\n    }\n\n    this.headers[key] = value;\n  }\n  /**\n   * Set sections\n   */\n\n\n  setSections(sections) {\n    if (typeof sections === 'undefined') {\n      return;\n    }\n\n    if (typeof sections !== 'object') {\n      throw new Error('Object expected for `sections`');\n    }\n\n    this.sections = sections;\n  }\n  /**\n   * Set custom args\n   */\n\n\n  setCustomArgs(customArgs) {\n    if (typeof customArgs === 'undefined') {\n      return;\n    }\n\n    if (typeof customArgs !== 'object') {\n      throw new Error('Object expected for `customArgs`');\n    }\n\n    this.customArgs = customArgs;\n  }\n  /**\n   * Set tracking settings\n   */\n\n\n  setTrackingSettings(settings) {\n    if (typeof settings === 'undefined') {\n      return;\n    }\n\n    if (typeof settings !== 'object') {\n      throw new Error('Object expected for `trackingSettings`');\n    }\n\n    this.trackingSettings = settings;\n  }\n  /**\n   * Set mail settings\n   */\n\n\n  setMailSettings(settings) {\n    if (typeof settings === 'undefined') {\n      return;\n    }\n\n    if (typeof settings !== 'object') {\n      throw new Error('Object expected for `mailSettings`');\n    }\n\n    this.mailSettings = settings;\n  }\n  /**\n   * To JSON\n   */\n\n\n  toJSON() {\n    //Extract properties from self\n    const from = this.from,\n          replyTo = this.replyTo,\n          sendAt = this.sendAt,\n          subject = this.subject,\n          content = this.content,\n          templateId = this.templateId,\n          personalizations = this.personalizations,\n          attachments = this.attachments,\n          ipPoolName = this.ipPoolName,\n          batchId = this.batchId,\n          asm = this.asm,\n          sections = this.sections,\n          headers = this.headers,\n          categories = this.categories,\n          customArgs = this.customArgs,\n          mailSettings = this.mailSettings,\n          trackingSettings = this.trackingSettings; //Initialize with mandatory values\n\n    const json = {\n      from,\n      subject,\n      personalizations: arrayToJSON(personalizations)\n    }; //Array properties\n\n    if (Array.isArray(attachments) && attachments.length > 0) {\n      json.attachments = arrayToJSON(attachments);\n    }\n\n    if (Array.isArray(categories) && categories.length > 0) {\n      json.categories = categories.filter(cat => cat !== '');\n    }\n\n    if (Array.isArray(content) && content.length > 0) {\n      json.content = arrayToJSON(content);\n    } //Object properties\n\n\n    if (Object.keys(headers).length > 0) {\n      json.headers = headers;\n    }\n\n    if (Object.keys(mailSettings).length > 0) {\n      json.mailSettings = mailSettings;\n    }\n\n    if (Object.keys(trackingSettings).length > 0) {\n      json.trackingSettings = trackingSettings;\n    }\n\n    if (Object.keys(customArgs).length > 0) {\n      json.customArgs = customArgs;\n    }\n\n    if (Object.keys(sections).length > 0) {\n      json.sections = sections;\n    }\n\n    if (Object.keys(asm).length > 0) {\n      json.asm = asm;\n    } //Simple properties\n\n\n    if (typeof replyTo !== 'undefined') {\n      json.replyTo = replyTo;\n    }\n\n    if (typeof sendAt !== 'undefined') {\n      json.sendAt = sendAt;\n    }\n\n    if (typeof batchId !== 'undefined') {\n      json.batchId = batchId;\n    }\n\n    if (typeof templateId !== 'undefined') {\n      json.templateId = templateId;\n    }\n\n    if (typeof ipPoolName !== 'undefined') {\n      json.ipPoolName = ipPoolName;\n    } //Return as snake cased object\n\n\n    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);\n  }\n  /**************************************************************************\n   * Static helpers\n   ***/\n\n  /**\n   * Create a Mail instance from given data\n   */\n\n\n  static create(data) {\n    //Array?\n    if (Array.isArray(data)) {\n      return data.filter(item => !!item).map(item => this.create(item));\n    } //Already instance of Mail class?\n\n\n    if (data instanceof Mail) {\n      return data;\n    } //Create instance\n\n\n    return new Mail(data);\n  }\n\n} //Export class\n\n\nmodule.exports = Mail;","map":{"version":3,"sources":["/Users/shwetagupta/Coding/Repository/marketplace_hc/node_modules/@sendgrid/helpers/classes/mail.js"],"names":["EmailAddress","require","Personalization","toCamelCase","toSnakeCase","deepClone","arrayToJSON","DYNAMIC_TEMPLATE_CHAR_WARNING","Mail","constructor","data","isDynamic","personalizations","attachments","content","categories","headers","sections","customArgs","trackingSettings","mailSettings","asm","substitutions","substitutionWrappers","dynamicTemplateData","fromData","Error","to","from","replyTo","cc","bcc","sendAt","subject","text","html","templateId","ipPoolName","batchId","category","isMultiple","setFrom","setReplyTo","setSubject","setSendAt","setTemplateId","setBatchId","setIpPoolName","setAttachments","setContent","setSections","setHeaders","setCategories","setCustomArgs","setAsm","setMailSettings","setTrackingSettings","setDynamicTemplateData","setSubstitutions","setSubstitutionWrappers","addTextContent","addHtmlContent","setPersonalizations","Array","isArray","forEach","addTo","create","Number","isInteger","indexOf","personalization","addPersonalization","applyDynamicTemplateData","applySubstitutions","push","wrappers","length","reverseMergeSubstitutions","deepMergeDynamicTemplateData","Object","values","value","test","console","warn","addContent","type","addAttachment","attachment","every","cat","addCategory","addHeader","key","settings","toJSON","json","filter","keys","item","map","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst EmailAddress = require('./email-address');\nconst Personalization = require('./personalization');\nconst toCamelCase = require('../helpers/to-camel-case');\nconst toSnakeCase = require('../helpers/to-snake-case');\nconst deepClone = require('../helpers/deep-clone');\nconst arrayToJSON = require('../helpers/array-to-json');\nconst { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');\n\n/**\n * Mail class\n */\nclass Mail {\n\n  /**\n   * Constructor\n   */\n  constructor(data) {\n\n    //Initialize array and object properties\n    this.isDynamic = false;\n    this.personalizations = [];\n    this.attachments = [];\n    this.content = [];\n    this.categories = [];\n    this.headers = {};\n    this.sections = {};\n    this.customArgs = {};\n    this.trackingSettings = {};\n    this.mailSettings = {};\n    this.asm = {};\n\n    //Helper properties\n    this.substitutions = null;\n    this.substitutionWrappers = null;\n    this.dynamicTemplateData = null;\n\n    //Process data if given\n    if (data) {\n      this.fromData(data);\n    }\n  }\n\n  /**\n   * Build from data\n   */\n  fromData(data) {\n\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object for Mail data');\n    }\n\n    //Convert to camel case to make it workable, making a copy to prevent\n    //changes to the original objects\n    data = deepClone(data);\n    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);\n\n    //Extract properties from data\n    const {\n      to, from, replyTo, cc, bcc, sendAt, subject, text, html, content,\n      templateId, personalizations, attachments, ipPoolName, batchId,\n      sections, headers, categories, category, customArgs, asm, mailSettings,\n      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,\n    } = data;\n\n    //Set data\n    this.setFrom(from);\n    this.setReplyTo(replyTo);\n    this.setSubject(subject);\n    this.setSendAt(sendAt);\n    this.setTemplateId(templateId);\n    this.setBatchId(batchId);\n    this.setIpPoolName(ipPoolName);\n    this.setAttachments(attachments);\n    this.setContent(content);\n    this.setSections(sections);\n    this.setHeaders(headers);\n    this.setCategories(category);\n    this.setCategories(categories);\n    this.setCustomArgs(customArgs);\n    this.setAsm(asm);\n    this.setMailSettings(mailSettings);\n    this.setTrackingSettings(trackingSettings);\n\n    if (this.isDynamic) {\n      this.setDynamicTemplateData(dynamicTemplateData);\n    }\n    else {\n      this.setSubstitutions(substitutions);\n      this.setSubstitutionWrappers(substitutionWrappers);\n    }\n\n    //Add contents from text/html properties\n    this.addTextContent(text);\n    this.addHtmlContent(html);\n\n    //Using \"to\" property for personalizations\n    if (personalizations) {\n      this.setPersonalizations(personalizations);\n    }\n\n    //Multiple individual emails\n    else if (isMultiple && Array.isArray(to)) {\n      to.forEach(to => this.addTo(to, cc, bcc));\n    }\n\n    //Single email (possibly with multiple recipients in the to field)\n    else {\n      this.addTo(to, cc, bcc);\n    }\n  }\n\n  /**\n   * Set from email\n   */\n  setFrom(from) {\n    if (typeof from === 'undefined') {\n      return;\n    }\n    this.from = EmailAddress.create(from);\n  }\n\n  /**\n   * Set reply to\n   */\n  setReplyTo(replyTo) {\n    if (typeof replyTo === 'undefined') {\n      return;\n    }\n    this.replyTo = EmailAddress.create(replyTo);\n  }\n\n  /**\n   * Set subject\n   */\n  setSubject(subject) {\n    if (typeof subject === 'undefined') {\n      return;\n    }\n    if (typeof subject !== 'string') {\n      throw new Error('String expected for `subject`');\n    }\n    this.subject = subject;\n  }\n\n  /**\n   * Set send at\n   */\n  setSendAt(sendAt) {\n    if (typeof sendAt === 'undefined') {\n      return;\n    }\n    if (!Number.isInteger(sendAt)) {\n      throw new Error('Integer expected for `sendAt`');\n    }\n    this.sendAt = sendAt;\n  }\n\n  /**\n   * Set template ID, also checks if the template is dynamic or legacy\n   */\n  setTemplateId(templateId) {\n    if (typeof templateId === 'undefined') {\n      return;\n    }\n    if (typeof templateId !== 'string') {\n      throw new Error('String expected for `templateId`');\n    }\n\n    if (templateId.indexOf('d-') === 0) {\n      this.isDynamic = true;\n    }\n\n    this.templateId = templateId;\n  }\n\n  /**\n   * Set batch ID\n   */\n  setBatchId(batchId) {\n    if (typeof batchId === 'undefined') {\n      return;\n    }\n    if (typeof batchId !== 'string') {\n      throw new Error('String expected for `batchId`');\n    }\n    this.batchId = batchId;\n  }\n\n  /**\n   * Set IP pool name\n   */\n  setIpPoolName(ipPoolName) {\n    if (typeof ipPoolName === 'undefined') {\n      return;\n    }\n    if (typeof ipPoolName !== 'string') {\n      throw new Error('String expected for `ipPoolName`');\n    }\n    this.ipPoolName = ipPoolName;\n  }\n\n  /**\n   * Set ASM\n   */\n  setAsm(asm) {\n    if (typeof asm === 'undefined') {\n      return;\n    }\n    if (typeof asm !== 'object') {\n      throw new Error('Object expected for `asm`');\n    }\n    this.asm = asm;\n  }\n\n  /**\n   * Set personalizations\n   */\n  setPersonalizations(personalizations) {\n    if (typeof personalizations === 'undefined') {\n      return;\n    }\n    if (!Array.isArray(personalizations)) {\n      throw new Error('Array expected for `personalizations`');\n    }\n\n    //Clear and use add helper to add one by one\n    this.personalizations = [];\n    personalizations\n      .forEach(personalization => this.addPersonalization(personalization));\n  }\n\n  /**\n   * Add personalization\n   */\n  addPersonalization(personalization) {\n\n    //We should either send substitutions or dynamicTemplateData\n    //depending on the templateId\n    if (this.isDynamic && personalization.substitutions) {\n      delete personalization.substitutions;\n    }\n    else if (personalization.dynamicTemplateData) {\n      delete personalization.dynamicTemplateData;\n    }\n\n    //Convert to class if needed\n    if (!(personalization instanceof Personalization)) {\n      personalization = new Personalization(personalization);\n    }\n\n    //If this is dynamic, set dynamicTemplateData, or set substitutions\n    if (this.isDynamic) {\n      this.applyDynamicTemplateData(personalization);\n    }\n    else {\n      this.applySubstitutions(personalization);\n    }\n\n    //Push personalization to array\n    this.personalizations.push(personalization);\n  }\n\n  /**\n   * Convenience method for quickly creating personalizations\n   */\n  addTo(to, cc, bcc) {\n    if (\n      typeof to === 'undefined' &&\n      typeof cc === 'undefined' &&\n      typeof bcc === 'undefined'\n    ) {\n      throw new Error('Provide at least one of to, cc or bcc');\n    }\n    this.addPersonalization(new Personalization({to, cc, bcc}));\n  }\n\n  /**\n   * Set substitutions\n   */\n  setSubstitutions(substitutions) {\n    if (typeof substitutions === 'undefined') {\n      return;\n    }\n    if (typeof substitutions !== 'object') {\n      throw new Error('Object expected for `substitutions`');\n    }\n    this.substitutions = substitutions;\n  }\n\n  /**\n   * Set substitution wrappers\n   */\n  setSubstitutionWrappers(wrappers) {\n    if (typeof wrappers === 'undefined') {\n      return;\n    }\n    if (!Array.isArray(wrappers) || wrappers.length !== 2) {\n      throw new Error(\n        'Array expected with two elements for `substitutionWrappers`'\n      );\n    }\n    this.substitutionWrappers = wrappers;\n  }\n\n  /**\n   * Helper which applies globally set substitutions to personalizations\n   */\n  applySubstitutions(personalization) {\n    if (personalization instanceof Personalization) {\n      personalization.reverseMergeSubstitutions(this.substitutions);\n      personalization.setSubstitutionWrappers(this.substitutionWrappers);\n    }\n  }\n\n  /**\n   * Helper which applies globally set dynamic_template_data to personalizations\n   */\n  applyDynamicTemplateData(personalization) {\n    if (personalization instanceof Personalization) {\n      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);\n    }\n  }\n\n  /**\n   * Set dynamicTemplateData\n   */\n  setDynamicTemplateData(dynamicTemplateData) {\n    if (typeof dynamicTemplateData === 'undefined') {\n      return;\n    }\n    if (typeof dynamicTemplateData !== 'object') {\n      throw new Error('Object expected for `dynamicTemplateData`');\n    }\n\n    // Check dynamic template for non-escaped characters and warn if found\n    Object.values(dynamicTemplateData).forEach(value => {\n      if (/['\"&]/.test(value)) {\n        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);\n      }\n    });\n\n    this.dynamicTemplateData = dynamicTemplateData;\n  }\n\n  /**\n   * Set content\n   */\n  setContent(content) {\n    if (typeof content === 'undefined') {\n      return;\n    }\n    if (!Array.isArray(content)) {\n      throw new Error('Array expected for `content`');\n    }\n    this.content = content;\n  }\n\n  /**\n   * Add content\n   */\n  addContent(content) {\n    if (typeof content !== 'object') {\n      throw new Error('Object expected for `content`');\n    }\n    this.content.push(content);\n  }\n\n  /**\n   * Add text content\n   */\n  addTextContent(text) {\n    if (typeof text === 'undefined') {\n      return;\n    }\n    if (typeof text !== 'string') {\n      throw new Error('String expected for `text`');\n    }\n    this.addContent({\n      value: text,\n      type: 'text/plain',\n    });\n  }\n\n  /**\n   * Add HTML content\n   */\n  addHtmlContent(html) {\n    if (typeof html === 'undefined') {\n      return;\n    }\n    if (typeof html !== 'string') {\n      throw new Error('String expected for `html`');\n    }\n    this.addContent({\n      value: html,\n      type: 'text/html',\n    });\n  }\n\n  /**\n   * Set attachments\n   */\n  setAttachments(attachments) {\n    if (typeof attachments === 'undefined') {\n      return;\n    }\n    if (!Array.isArray(attachments)) {\n      throw new Error('Array expected for `attachments`');\n    }\n    this.attachments = attachments;\n  }\n\n  /**\n   * Add attachment\n   */\n  addAttachment(attachment) {\n    if (typeof attachment !== 'object') {\n      throw new Error('Object expected for `attachment`');\n    }\n    this.attachments.push(attachment);\n  }\n\n  /**\n   * Set categories\n   */\n  setCategories(categories) {\n    if (typeof categories === 'undefined') {\n      return;\n    }\n    if (typeof categories === 'string') {\n      categories = [categories];\n    }\n    if (!Array.isArray(categories) ||\n      !categories.every(cat => typeof cat === 'string')) {\n      throw new Error('Array of strings expected for `categories`');\n    }\n    this.categories = categories;\n  }\n\n  /**\n   * Add category\n   */\n  addCategory(category) {\n    if (typeof category !== 'string') {\n      throw new Error('String expected for `category`');\n    }\n    this.categories.push(category);\n  }\n\n  /**\n   * Set headers\n   */\n  setHeaders(headers) {\n    if (typeof headers === 'undefined') {\n      return;\n    }\n    if (typeof headers !== 'object') {\n      throw new Error('Object expected for `headers`');\n    }\n    this.headers = headers;\n  }\n\n  /**\n   * Add a header\n   */\n  addHeader(key, value) {\n    if (typeof key !== 'string') {\n      throw new Error('String expected for header key');\n    }\n    if (typeof value !== 'string') {\n      throw new Error('String expected for header value');\n    }\n    this.headers[key] = value;\n  }\n\n  /**\n   * Set sections\n   */\n  setSections(sections) {\n    if (typeof sections === 'undefined') {\n      return;\n    }\n    if (typeof sections !== 'object') {\n      throw new Error('Object expected for `sections`');\n    }\n    this.sections = sections;\n  }\n\n  /**\n   * Set custom args\n   */\n  setCustomArgs(customArgs) {\n    if (typeof customArgs === 'undefined') {\n      return;\n    }\n    if (typeof customArgs !== 'object') {\n      throw new Error('Object expected for `customArgs`');\n    }\n    this.customArgs = customArgs;\n  }\n\n  /**\n   * Set tracking settings\n   */\n  setTrackingSettings(settings) {\n    if (typeof settings === 'undefined') {\n      return;\n    }\n    if (typeof settings !== 'object') {\n      throw new Error('Object expected for `trackingSettings`');\n    }\n    this.trackingSettings = settings;\n  }\n\n  /**\n   * Set mail settings\n   */\n  setMailSettings(settings) {\n    if (typeof settings === 'undefined') {\n      return;\n    }\n    if (typeof settings !== 'object') {\n      throw new Error('Object expected for `mailSettings`');\n    }\n    this.mailSettings = settings;\n  }\n\n  /**\n   * To JSON\n   */\n  toJSON() {\n\n    //Extract properties from self\n    const {\n      from, replyTo, sendAt, subject, content, templateId,\n      personalizations, attachments, ipPoolName, batchId, asm,\n      sections, headers, categories, customArgs, mailSettings,\n      trackingSettings,\n    } = this;\n\n    //Initialize with mandatory values\n    const json = {\n      from, subject,\n      personalizations: arrayToJSON(personalizations),\n    };\n\n    //Array properties\n    if (Array.isArray(attachments) && attachments.length > 0) {\n      json.attachments = arrayToJSON(attachments);\n    }\n    if (Array.isArray(categories) && categories.length > 0) {\n      json.categories = categories.filter(cat => cat !== '');\n    }\n    if (Array.isArray(content) && content.length > 0) {\n      json.content = arrayToJSON(content);\n    }\n\n    //Object properties\n    if (Object.keys(headers).length > 0) {\n      json.headers = headers;\n    }\n    if (Object.keys(mailSettings).length > 0) {\n      json.mailSettings = mailSettings;\n    }\n    if (Object.keys(trackingSettings).length > 0) {\n      json.trackingSettings = trackingSettings;\n    }\n    if (Object.keys(customArgs).length > 0) {\n      json.customArgs = customArgs;\n    }\n    if (Object.keys(sections).length > 0) {\n      json.sections = sections;\n    }\n    if (Object.keys(asm).length > 0) {\n      json.asm = asm;\n    }\n\n    //Simple properties\n    if (typeof replyTo !== 'undefined') {\n      json.replyTo = replyTo;\n    }\n    if (typeof sendAt !== 'undefined') {\n      json.sendAt = sendAt;\n    }\n    if (typeof batchId !== 'undefined') {\n      json.batchId = batchId;\n    }\n    if (typeof templateId !== 'undefined') {\n      json.templateId = templateId;\n    }\n    if (typeof ipPoolName !== 'undefined') {\n      json.ipPoolName = ipPoolName;\n    }\n\n    //Return as snake cased object\n    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);\n  }\n\n  /**************************************************************************\n   * Static helpers\n   ***/\n\n  /**\n   * Create a Mail instance from given data\n   */\n  static create(data) {\n\n    //Array?\n    if (Array.isArray(data)) {\n      return data\n        .filter(item => !!item)\n        .map(item => this.create(item));\n    }\n\n    //Already instance of Mail class?\n    if (data instanceof Mail) {\n      return data;\n    }\n\n    //Create instance\n    return new Mail(data);\n  }\n}\n\n//Export class\nmodule.exports = Mail;\n"]},"metadata":{},"sourceType":"script"}