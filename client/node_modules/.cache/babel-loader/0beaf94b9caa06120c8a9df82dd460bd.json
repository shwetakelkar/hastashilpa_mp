{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nconst chalk = require('chalk');\n/**\n * Response error class\n */\n\n\nclass ResponseError extends Error {\n  /**\n   * Constructor\n   */\n  constructor(response) {\n    //Super\n    super(); //Extract data from response\n\n    const headers = response.headers,\n          statusCode = response.statusCode,\n          statusMessage = response.statusMessage,\n          body = response.body; //Set data\n\n    this.code = statusCode;\n    this.message = statusMessage;\n    this.response = {\n      headers,\n      body\n    }; //Capture stack trace\n\n    if (!this.stack) {\n      Error.captureStackTrace(this, this.constructor);\n    } //Clean up stack trace\n\n\n    const regex = new RegExp(process.cwd() + '/', 'gi');\n    this.stack = this.stack.replace(regex, '');\n  }\n  /**\n   * Convert to string\n   */\n\n\n  toString() {\n    const body = this.response.body;\n    let err = chalk.red(`${this.message} (${this.code})`);\n\n    if (body && Array.isArray(body.errors)) {\n      body.errors.forEach(error => {\n        const message = chalk.yellow(error.message);\n        const field = chalk.grey(error.field);\n        const help = chalk.grey(error.help);\n        err += `\\n  ${message}\\n    ${field}\\n    ${help}`;\n      });\n    }\n\n    return err;\n  }\n  /**\n   * Convert to simple object for JSON responses\n   */\n\n\n  toJSON() {\n    const message = this.message,\n          code = this.code,\n          response = this.response;\n    return {\n      message,\n      code,\n      response\n    };\n  }\n\n} //Export\n\n\nmodule.exports = ResponseError;","map":{"version":3,"sources":["/Users/shwetagupta/Coding/Repository/marketplace_hc/node_modules/@sendgrid/helpers/classes/response-error.js"],"names":["chalk","require","ResponseError","Error","constructor","response","headers","statusCode","statusMessage","body","code","message","stack","captureStackTrace","regex","RegExp","process","cwd","replace","toString","err","red","Array","isArray","errors","forEach","error","yellow","field","grey","help","toJSON","module","exports"],"mappings":"AAAA;AAEA;;;;AAGA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;AAEA;;;;;AAGA,MAAMC,aAAN,SAA4BC,KAA5B,CAAkC;AAEhC;;;AAGAC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAEpB;AACA,YAHoB,CAKpB;;AALoB,UAMbC,OANa,GAM+BD,QAN/B,CAMbC,OANa;AAAA,UAMJC,UANI,GAM+BF,QAN/B,CAMJE,UANI;AAAA,UAMQC,aANR,GAM+BH,QAN/B,CAMQG,aANR;AAAA,UAMuBC,IANvB,GAM+BJ,QAN/B,CAMuBI,IANvB,EAQpB;;AACA,SAAKC,IAAL,GAAYH,UAAZ;AACA,SAAKI,OAAL,GAAeH,aAAf;AACA,SAAKH,QAAL,GAAgB;AAACC,MAAAA,OAAD;AAAUG,MAAAA;AAAV,KAAhB,CAXoB,CAapB;;AACA,QAAI,CAAC,KAAKG,KAAV,EAAiB;AACfT,MAAAA,KAAK,CAACU,iBAAN,CAAwB,IAAxB,EAA8B,KAAKT,WAAnC;AACD,KAhBmB,CAkBpB;;;AACA,UAAMU,KAAK,GAAG,IAAIC,MAAJ,CAAWC,OAAO,CAACC,GAAR,KAAgB,GAA3B,EAAgC,IAAhC,CAAd;AACA,SAAKL,KAAL,GAAa,KAAKA,KAAL,CAAWM,OAAX,CAAmBJ,KAAnB,EAA0B,EAA1B,CAAb;AACD;AAED;;;;;AAGAK,EAAAA,QAAQ,GAAG;AAAA,UACFV,IADE,GACM,KAAKJ,QADX,CACFI,IADE;AAET,QAAIW,GAAG,GAAGpB,KAAK,CAACqB,GAAN,CAAW,GAAE,KAAKV,OAAQ,KAAI,KAAKD,IAAK,GAAxC,CAAV;;AACA,QAAID,IAAI,IAAIa,KAAK,CAACC,OAAN,CAAcd,IAAI,CAACe,MAAnB,CAAZ,EAAwC;AACtCf,MAAAA,IAAI,CAACe,MAAL,CAAYC,OAAZ,CAAoBC,KAAK,IAAI;AAC3B,cAAMf,OAAO,GAAGX,KAAK,CAAC2B,MAAN,CAAaD,KAAK,CAACf,OAAnB,CAAhB;AACA,cAAMiB,KAAK,GAAG5B,KAAK,CAAC6B,IAAN,CAAWH,KAAK,CAACE,KAAjB,CAAd;AACA,cAAME,IAAI,GAAG9B,KAAK,CAAC6B,IAAN,CAAWH,KAAK,CAACI,IAAjB,CAAb;AACAV,QAAAA,GAAG,IAAK,OAAMT,OAAQ,SAAQiB,KAAM,SAAQE,IAAK,EAAjD;AACD,OALD;AAMD;;AACD,WAAOV,GAAP;AACD;AAED;;;;;AAGAW,EAAAA,MAAM,GAAG;AAAA,UACApB,OADA,GAC2B,IAD3B,CACAA,OADA;AAAA,UACSD,IADT,GAC2B,IAD3B,CACSA,IADT;AAAA,UACeL,QADf,GAC2B,IAD3B,CACeA,QADf;AAEP,WAAO;AAACM,MAAAA,OAAD;AAAUD,MAAAA,IAAV;AAAgBL,MAAAA;AAAhB,KAAP;AACD;;AAnD+B,C,CAsDlC;;;AACA2B,MAAM,CAACC,OAAP,GAAiB/B,aAAjB","sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst chalk = require('chalk');\n\n/**\n * Response error class\n */\nclass ResponseError extends Error {\n\n  /**\n   * Constructor\n   */\n  constructor(response) {\n\n    //Super\n    super();\n\n    //Extract data from response\n    const {headers, statusCode, statusMessage, body} = response;\n\n    //Set data\n    this.code = statusCode;\n    this.message = statusMessage;\n    this.response = {headers, body};\n\n    //Capture stack trace\n    if (!this.stack) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    //Clean up stack trace\n    const regex = new RegExp(process.cwd() + '/', 'gi');\n    this.stack = this.stack.replace(regex, '');\n  }\n\n  /**\n   * Convert to string\n   */\n  toString() {\n    const {body} = this.response;\n    let err = chalk.red(`${this.message} (${this.code})`);\n    if (body && Array.isArray(body.errors)) {\n      body.errors.forEach(error => {\n        const message = chalk.yellow(error.message);\n        const field = chalk.grey(error.field);\n        const help = chalk.grey(error.help);\n        err += `\\n  ${message}\\n    ${field}\\n    ${help}`;\n      });\n    }\n    return err;\n  }\n\n  /**\n   * Convert to simple object for JSON responses\n   */\n  toJSON() {\n    const {message, code, response} = this;\n    return {message, code, response};\n  }\n}\n\n//Export\nmodule.exports = ResponseError;\n"]},"metadata":{},"sourceType":"script"}