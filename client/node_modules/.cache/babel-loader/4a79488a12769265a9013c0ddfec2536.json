{"ast":null,"code":"import _objectSpread from \"/Users/shwetagupta/Coding/Repository/marketplace_hc/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport decode from 'jwt-decode';\nexport default class AuthHelperMethods {\n  constructor(domain) {\n    this.login = (email, password) => {\n      return this.fetch(\"/login\", {\n        method: 'POST',\n        body: JSON.stringify({\n          email,\n          password\n        })\n      }).then(res => {\n        this.setToken(res.token);\n        return Promise.resolve(res);\n      });\n    };\n\n    this.loggedIn = () => {\n      // Checks if there is a saved token and it's still valid\n      const token = this.getToken(); // Getting token from localstorage\n\n      return !!token && !this.isTokenExpired(token); // handwaiving here\n    };\n\n    this.isTokenExpired = token => {\n      try {\n        const decoded = decode(token);\n\n        if (decoded.exp < Date.now() / 1000) {\n          // Checking if token is expired.\n          return true;\n        } else return false;\n      } catch (err) {\n        console.log(\"expired check failed! Line 42: AuthService.js\");\n        return false;\n      }\n    };\n\n    this.setToken = idToken => {\n      // Saves user token to localStorage\n      localStorage.setItem(\"id_token\", idToken);\n    };\n\n    this.getToken = () => {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem(\"id_token\");\n    };\n\n    this.logout = () => {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem(\"id_token\");\n    };\n\n    this.getConfirm = () => {\n      // Using jwt-decode npm package to decode the token\n      let answer = decode(this.getToken());\n      console.log(\"Recieved answer!\");\n      return answer;\n    };\n\n    this.fetch = (url, options) => {\n      // performs api calls sending the required authentication headers\n      const headers = {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }; // Setting Authorization header\n      // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n\n      if (this.loggedIn()) {\n        headers[\"Authorization\"] = \"Bearer \" + this.getToken();\n      }\n\n      return fetch(url, _objectSpread({\n        headers\n      }, options)).then(this._checkStatus).then(response => response.json());\n    };\n\n    this._checkStatus = response => {\n      // raises an error in case response status is not a success\n      if (response.status >= 200 && response.status < 300) {\n        // Success status lies between 200 to 300\n        return response;\n      } else {\n        var error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n      }\n    };\n\n    this.domain = domain || window.location.url;\n  }\n\n}","map":{"version":3,"sources":["/Users/shwetagupta/Coding/Repository/marketplace_hc/client/src/components/Helper/AuthHelperMethods.js"],"names":["decode","AuthHelperMethods","constructor","domain","login","email","password","fetch","method","body","JSON","stringify","then","res","setToken","token","Promise","resolve","loggedIn","getToken","isTokenExpired","decoded","exp","Date","now","err","console","log","idToken","localStorage","setItem","getItem","logout","removeItem","getConfirm","answer","url","options","headers","Accept","_checkStatus","response","json","status","error","Error","statusText","window","location"],"mappings":"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","sourcesContent":["import decode from 'jwt-decode'\n\nexport default class AuthHelperMethods{\n\n    constructor(domain){\n    this.domain = domain || window.location.url\n    }\n\n    login = (email,password)=>{\n        return this.fetch(\"/login\",{\n            method:'POST',\n            body:JSON.stringify({email,password})}).then(res=>{this.setToken(res.token)\n            return Promise.resolve(res)})\n        \n    }\n    loggedIn = () => {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken(); // Getting token from localstorage\n        return !!token && !this.isTokenExpired(token); // handwaiving here\n      };\n    \n      isTokenExpired = token => {\n        try {\n          const decoded = decode(token);\n          if (decoded.exp < Date.now() / 1000) {\n            // Checking if token is expired.\n            return true;\n          } else return false;\n        } catch (err) {\n          console.log(\"expired check failed! Line 42: AuthService.js\");\n          return false;\n        }\n      };\n    \n      setToken = idToken => {\n        // Saves user token to localStorage\n        localStorage.setItem(\"id_token\", idToken);\n      };\n    \n      getToken = () => {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem(\"id_token\");\n      };\n    \n      logout = () => {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem(\"id_token\");\n      };\n    \n      getConfirm = () => {\n        // Using jwt-decode npm package to decode the token\n        let answer = decode(this.getToken());\n        console.log(\"Recieved answer!\");\n        return answer;\n      };\n    \n      fetch = (url, options) => {\n        // performs api calls sending the required authentication headers\n        const headers = {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        };\n        // Setting Authorization header\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n        if (this.loggedIn()) {\n          headers[\"Authorization\"] = \"Bearer \" + this.getToken();\n        }\n    \n        return fetch(url, {\n          headers,\n          ...options\n        })\n          .then(this._checkStatus)\n          .then(response => response.json());\n      };\n      _checkStatus = response => {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) {\n          // Success status lies between 200 to 300\n          return response;\n        } else {\n          var error = new Error(response.statusText);\n          error.response = response;\n          throw error;\n        }\n      };\n    }\n    \n    \n\n"]},"metadata":{},"sourceType":"module"}