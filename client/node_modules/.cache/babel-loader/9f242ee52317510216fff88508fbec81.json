{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nconst toCamelCase = require('../helpers/to-camel-case');\n\nconst deepClone = require('../helpers/deep-clone');\n/**\n * Options\n */\n\n\nconst AggregatedByOptions = ['day', 'week', 'month'];\nconst CountryOptions = ['us', 'ca'];\nconst SortByDirection = ['desc', 'asc'];\n/**\n * Statistics class\n */\n\nclass Statistics {\n  constructor(data) {\n    this.startDate = null;\n    this.endDate = null;\n    this.aggregatedBy = null;\n\n    if (data) {\n      this.fromData(data);\n    }\n  }\n  /**\n   * Build from data\n   */\n\n\n  fromData(data) {\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object for Statistics data');\n    } //Convert to camel case to make it workable, making a copy to prevent\n    //changes to the original objects\n\n\n    data = deepClone(data);\n    data = toCamelCase(data, ['substitutions', 'customArgs']);\n    const _data = data,\n          startDate = _data.startDate,\n          endDate = _data.endDate,\n          aggregatedBy = _data.aggregatedBy;\n    this.setStartDate(startDate);\n    this.setEndDate(endDate);\n    this.setAggregatedBy(aggregatedBy);\n  }\n  /**\n   * Set startDate\n   */\n\n\n  setStartDate(startDate) {\n    if (typeof startDate === 'undefined') {\n      throw new Error('Date expected for `startDate`');\n    }\n\n    if (new Date(startDate) === 'Invalid Date' || isNaN(new Date(startDate))) {\n      throw new Error('Date expected for `startDate`');\n    }\n\n    console.log(startDate);\n    this.startDate = new Date(startDate).toISOString().slice(0, 10);\n  }\n  /**\n   * Set endDate\n   */\n\n\n  setEndDate(endDate) {\n    if (typeof endDate === 'undefined') {\n      this.endDate = new Date().toISOString().slice(0, 10);\n      return;\n    }\n\n    if (new Date(endDate) === 'Invalid Date' || isNaN(new Date(endDate))) {\n      throw new Error('Date expected for `endDate`');\n    }\n\n    this.endDate = new Date(endDate).toISOString().slice(0, 10);\n  }\n  /**\n   * Set aggregatedBy\n   */\n\n\n  setAggregatedBy(aggregatedBy) {\n    if (typeof aggregatedBy === 'undefined') {\n      return;\n    }\n\n    if (typeof aggregatedBy === 'string' && AggregatedByOptions.includes(aggregatedBy.toLowerCase())) {\n      this.aggregatedBy = aggregatedBy;\n    } else {\n      throw new Error('Incorrect value for `aggregatedBy`');\n    }\n  }\n  /**\n   * Get Global\n   */\n\n\n  getGlobal() {\n    const startDate = this.startDate,\n          endDate = this.endDate,\n          aggregatedBy = this.aggregatedBy;\n    return {\n      startDate,\n      endDate,\n      aggregatedBy\n    };\n  }\n  /**\n   * Get Advanced\n   */\n\n\n  getAdvanced(country) {\n    const json = this.getGlobal();\n\n    if (typeof country === 'undefined') {\n      return json;\n    }\n\n    if (typeof country === 'string' && CountryOptions.includes(country.toLowerCase())) {\n      json.country = country;\n    }\n\n    return json;\n  }\n  /**\n   * Get Advanced Mailbox Providers\n   */\n\n\n  getAdvancedMailboxProviders(mailBoxProviders) {\n    const json = this.getGlobal();\n\n    if (typeof mailBoxProviders === 'undefined') {\n      return json;\n    }\n\n    if (Array.isArray(mailBoxProviders) && mailBoxProviders.some(x => typeof x !== 'string')) {\n      throw new Error('Array of strings expected for `mailboxProviders`');\n    }\n\n    json.mailBoxProviders = mailBoxProviders;\n    return json;\n  }\n  /**\n   * Get Advanced Browsers\n   */\n\n\n  getAdvancedBrowsers(browsers) {\n    const json = this.getGlobal();\n\n    if (typeof browsers === 'undefined') {\n      return json;\n    }\n\n    if (Array.isArray(browsers) && browsers.some(x => typeof x !== 'string')) {\n      throw new Error('Array of strings expected for `browsers`');\n    }\n\n    json.browsers = browsers;\n    return json;\n  }\n  /**\n   * Get Categories\n   */\n\n\n  getCategories(categories) {\n    if (typeof categories === 'undefined') {\n      throw new Error('Array of strings expected for `categories`');\n    }\n\n    if (!this._isValidArrayOfStrings(categories)) {\n      throw new Error('Array of strings expected for `categories`');\n    }\n\n    const json = this.getGlobal();\n    json.categories = categories;\n    return json;\n  }\n  /**\n   * Get Subuser\n   */\n\n\n  getSubuser(subusers) {\n    if (typeof subusers === 'undefined') {\n      throw new Error('Array of strings expected for `subusers`');\n    }\n\n    if (!this._isValidArrayOfStrings(subusers)) {\n      throw new Error('Array of strings expected for `subusers`');\n    }\n\n    const json = this.getGlobal();\n    json.subusers = subusers;\n    return json;\n  }\n  /**\n   * Get Subuser Sum\n   */\n\n\n  getSubuserSum(sortByMetric = 'delivered', sortByDirection = SortByDirection[0], limit = 5, offset = 0) {\n    if (typeof sortByMetric !== 'string') {\n      throw new Error('string expected for `sortByMetric`');\n    }\n\n    if (!SortByDirection.includes(sortByDirection.toLowerCase())) {\n      throw new Error('desc or asc expected for `sortByDirection`');\n    }\n\n    if (typeof limit !== 'number') {\n      throw new Error('number expected for `limit`');\n    }\n\n    if (typeof offset !== 'number') {\n      throw new Error('number expected for `offset`');\n    }\n\n    const json = this.getGlobal();\n    json.sortByMetric = sortByMetric;\n    json.sortByDirection = sortByDirection;\n    json.limit = limit;\n    json.offset = offset;\n    return json;\n  }\n  /**\n   * Get Subuser Monthly\n   */\n\n\n  getSubuserMonthly(sortByMetric = 'delivered', sortByDirection = SortByDirection[0], limit = 5, offset = 0) {\n    if (typeof sortByMetric !== 'string') {\n      throw new Error('string expected for `sortByMetric`');\n    }\n\n    if (!SortByDirection.includes(sortByDirection.toLowerCase())) {\n      throw new Error('desc or asc expected for `sortByDirection`');\n    }\n\n    if (typeof limit !== 'number') {\n      throw new Error('number expected for `limit`');\n    }\n\n    if (typeof offset !== 'number') {\n      throw new Error('number expected for `offset`');\n    }\n\n    const json = this.getGlobal();\n    json.sortByMetric = sortByMetric;\n    json.sortByDirection = sortByDirection;\n    json.limit = limit;\n    json.offset = offset;\n    return json;\n  }\n\n  _isValidArrayOfStrings(arr) {\n    if (!Array.isArray(arr)) {\n      return false;\n    }\n\n    if (arr.length < 1 || arr.some(x => typeof x !== 'string')) {\n      return false;\n    }\n\n    return true;\n  }\n\n} //Export class\n\n\nmodule.exports = Statistics;","map":{"version":3,"sources":["/Users/shwetagupta/Coding/Repository/marketplace_hc/node_modules/@sendgrid/helpers/classes/statistics.js"],"names":["toCamelCase","require","deepClone","AggregatedByOptions","CountryOptions","SortByDirection","Statistics","constructor","data","startDate","endDate","aggregatedBy","fromData","Error","setStartDate","setEndDate","setAggregatedBy","Date","isNaN","console","log","toISOString","slice","includes","toLowerCase","getGlobal","getAdvanced","country","json","getAdvancedMailboxProviders","mailBoxProviders","Array","isArray","some","x","getAdvancedBrowsers","browsers","getCategories","categories","_isValidArrayOfStrings","getSubuser","subusers","getSubuserSum","sortByMetric","sortByDirection","limit","offset","getSubuserMonthly","arr","length","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst toCamelCase = require('../helpers/to-camel-case');\nconst deepClone = require('../helpers/deep-clone');\n\n/**\n * Options\n */\nconst AggregatedByOptions = ['day', 'week', 'month'];\nconst CountryOptions = ['us', 'ca'];\nconst SortByDirection = ['desc', 'asc'];\n\n/**\n * Statistics class\n */\nclass Statistics {\n  constructor(data) {\n    this.startDate = null;\n    this.endDate = null;\n    this.aggregatedBy = null;\n\n    if (data) {\n      this.fromData(data);\n    }\n  }\n\n  /**\n   * Build from data\n   */\n  fromData(data) {\n\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object for Statistics data');\n    }\n\n    //Convert to camel case to make it workable, making a copy to prevent\n    //changes to the original objects\n    data = deepClone(data);\n    data = toCamelCase(data, ['substitutions', 'customArgs']);\n\n    const { startDate,\n      endDate,\n      aggregatedBy,\n    } = data;\n\n    this.setStartDate(startDate);\n    this.setEndDate(endDate);\n    this.setAggregatedBy(aggregatedBy);\n  }\n\n  /**\n   * Set startDate\n   */\n  setStartDate(startDate) {\n    if (typeof startDate === 'undefined') {\n      throw new Error('Date expected for `startDate`');\n    }\n\n    if ((new Date(startDate) === 'Invalid Date') ||\n        isNaN(new Date(startDate))) {\n      throw new Error('Date expected for `startDate`');\n    }\n\n    console.log(startDate);\n\n    this.startDate = new Date(startDate).toISOString().slice(0, 10);\n  }\n\n  /**\n   * Set endDate\n   */\n  setEndDate(endDate) {\n    if (typeof endDate === 'undefined') {\n      this.endDate = new Date().toISOString().slice(0, 10);\n      return;\n    }\n\n    if (new Date(endDate) === 'Invalid Date' || isNaN(new Date(endDate))) {\n      throw new Error('Date expected for `endDate`');\n    }\n\n    this.endDate = new Date(endDate).toISOString().slice(0, 10);\n  }\n\n  /**\n   * Set aggregatedBy\n   */\n  setAggregatedBy(aggregatedBy) {\n    if (typeof aggregatedBy === 'undefined') {\n      return;\n    }\n\n    if (typeof aggregatedBy === 'string' &&\n        AggregatedByOptions.includes(aggregatedBy.toLowerCase())) {\n      this.aggregatedBy = aggregatedBy;\n    }\n    else {\n      throw new Error('Incorrect value for `aggregatedBy`');\n    }\n  }\n\n  /**\n   * Get Global\n   */\n  getGlobal() {\n    const { startDate, endDate, aggregatedBy } = this;\n\n    return { startDate, endDate, aggregatedBy };\n  }\n\n  /**\n   * Get Advanced\n   */\n  getAdvanced(country) {\n    const json = this.getGlobal();\n\n    if (typeof country === 'undefined') {\n      return json;\n    }\n\n    if (typeof country === 'string' &&\n        CountryOptions.includes(country.toLowerCase())) {\n      json.country = country;\n    }\n\n    return json;\n  }\n\n  /**\n   * Get Advanced Mailbox Providers\n   */\n  getAdvancedMailboxProviders(mailBoxProviders) {\n    const json = this.getGlobal();\n\n    if (typeof mailBoxProviders === 'undefined') {\n      return json;\n    }\n\n    if (Array.isArray(mailBoxProviders) &&\n        mailBoxProviders.some(x => typeof x !== 'string')) {\n      throw new Error('Array of strings expected for `mailboxProviders`');\n    }\n\n    json.mailBoxProviders = mailBoxProviders;\n\n    return json;\n  }\n\n  /**\n   * Get Advanced Browsers\n   */\n  getAdvancedBrowsers(browsers) {\n    const json = this.getGlobal();\n\n    if (typeof browsers === 'undefined') {\n      return json;\n    }\n\n    if (Array.isArray(browsers) && browsers.some(x => typeof x !== 'string')) {\n      throw new Error('Array of strings expected for `browsers`');\n    }\n\n    json.browsers = browsers;\n\n    return json;\n  }\n\n  /**\n   * Get Categories\n   */\n  getCategories(categories) {\n    if (typeof categories === 'undefined') {\n      throw new Error('Array of strings expected for `categories`');\n    }\n\n    if (!this._isValidArrayOfStrings(categories)) {\n      throw new Error('Array of strings expected for `categories`');\n    }\n\n    const json = this.getGlobal();\n    json.categories = categories;\n\n    return json;\n  }\n\n  /**\n   * Get Subuser\n   */\n  getSubuser(subusers) {\n    if (typeof subusers === 'undefined') {\n      throw new Error('Array of strings expected for `subusers`');\n    }\n\n    if (!this._isValidArrayOfStrings(subusers)) {\n      throw new Error('Array of strings expected for `subusers`');\n    }\n\n    const json = this.getGlobal();\n    json.subusers = subusers;\n\n    return json;\n  }\n\n  /**\n   * Get Subuser Sum\n   */\n  getSubuserSum(sortByMetric = 'delivered',\n    sortByDirection = SortByDirection[0], limit = 5, offset = 0) {\n    if (typeof sortByMetric !== 'string') {\n      throw new Error('string expected for `sortByMetric`');\n    }\n\n    if (!SortByDirection.includes(sortByDirection.toLowerCase())) {\n      throw new Error('desc or asc expected for `sortByDirection`');\n    }\n\n    if (typeof limit !== 'number') {\n      throw new Error('number expected for `limit`');\n    }\n\n    if (typeof offset !== 'number') {\n      throw new Error('number expected for `offset`');\n    }\n\n    const json = this.getGlobal();\n\n    json.sortByMetric = sortByMetric;\n    json.sortByDirection = sortByDirection;\n    json.limit = limit;\n    json.offset = offset;\n\n    return json;\n  }\n\n  /**\n   * Get Subuser Monthly\n   */\n  getSubuserMonthly(sortByMetric = 'delivered',\n    sortByDirection = SortByDirection[0], limit = 5, offset = 0) {\n    if (typeof sortByMetric !== 'string') {\n      throw new Error('string expected for `sortByMetric`');\n    }\n\n    if (!SortByDirection.includes(sortByDirection.toLowerCase())) {\n      throw new Error('desc or asc expected for `sortByDirection`');\n    }\n\n    if (typeof limit !== 'number') {\n      throw new Error('number expected for `limit`');\n    }\n\n    if (typeof offset !== 'number') {\n      throw new Error('number expected for `offset`');\n    }\n\n    const json = this.getGlobal();\n\n    json.sortByMetric = sortByMetric;\n    json.sortByDirection = sortByDirection;\n    json.limit = limit;\n    json.offset = offset;\n\n    return json;\n  }\n\n  _isValidArrayOfStrings(arr) {\n    if (!Array.isArray(arr)) {\n      return false;\n    }\n\n    if (arr.length < 1 || arr.some(x => typeof x !== 'string')) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n//Export class\nmodule.exports = Statistics;\n"]},"metadata":{},"sourceType":"script"}